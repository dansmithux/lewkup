generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String             @id @default(cuid())
  name          String?
  email         String             @unique
  emailVerified DateTime?
  image         String
  accounts      Account[]
  sessions      Session[]
  searches      SearchHistory[]
  credits       Credits[]
  creditBalance UserCreditBalance?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SearchHistory {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  phoneNumber       String
  formattedNumber   String
  callerName        String
  callerType        String
  carrierName       String
  lineTypeId        String
  valid             Boolean   @default(false)
  searchTimestamp   DateTime  @default(now())
}

model Credits {
  id           Int      @id @default(autoincrement())
  userId       String
  credits      Int
  price        Int      @default(0)
  purchaseDate DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

model UserCreditBalance {
  userId  String @id
  balance Int    @default(0)
  user    User   @relation(fields: [userId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

